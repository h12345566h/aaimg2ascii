import sys
import numpy as np
import math
from PIL import Image
from decimal import Decimal
import json


class main:
    def __init__(self, imgFile, cols):
        self.image = Image.open(imgFile).convert('L')
        self.avglite = round(self.getAverageL(self.image), 2)
        self.imgW, self.imgH = self.image.size[0], self.image.size[1]
        self.scale = round((self.imgH/self.imgW)*0.5, 2)
        self.cols = int(cols)
        self.rows = int(self.cols * self.scale)
        # 圖片太小退出
        if self.cols > self.imgW or self.rows > self.imgH:
            self.result = str("圖像太小不足分割！（提高圖像分辨率或降低精細度")
            exit(0)
        self.lrows = 4
        self.lcols = 2
        self.block = self.setblock()
        self.asciiresult = self.covertImageToAscii()
        self.result = {
            "rows": self.rows,
            "cols": self.cols,
            "data": self.asciiresult,
        }

    def __del__(self):
        print(json.dumps(self.result))

    def covertImageToAscii(self):
        result = ""
        h = self.imgH / self.rows
        w = self.imgW / self.cols
        for j in range(self.rows):
            y1 = int(j * h)
            y2 = int((j + 1) * h)
            if j == self.rows - 1:
                y2 = self.imgH
            for i in range(self.cols):
                x1 = int(i * w)
                x2 = int((i + 1) * w)
                if i == self.cols - 1:
                    x2 = self.imgW
                img = self.image.crop((x1, y1, x2, y2))
                blockcontent = self.split8pack(img)
                if j == self.rows-1 and i == self.cols-1:
                    result += blockcontent
                else:
                    result += blockcontent + ","
        return result

     # 將一格分成8個點去計算平均亮度
    def split8pack(self, image):
        lW, lH = image.size[0], image.size[1]
        lw = lW / self.lcols
        lh = lH / self.lrows
        getblockstr = ""
        for lj in range(self.lrows):
            ly1 = int(lj * lh)
            ly2 = int((lj + 1) * lh)
            if lj == self.lrows - 1:
                ly2 = lH
            getblockcount = 0
            for li in range(self.lcols):
                lx1 = int(li * lw)
                lx2 = int((li + 1) * lw)
                if li == self.lcols - 1:
                    lx2 = lW
                limg = image.crop((lx1, ly1, lx2, ly2))
                avg = float(self.getAverageL(limg))
                if avg > (self.avglite)*0.9:
                    if li == 0:
                        getblockcount += 1
                    else:
                        getblockcount += 2
            getblockstr += str(getblockcount)
        return getblockstr

    def setblock(self):
        block = {
            "0000": '⠀',
            "1000": '⠁',
            "0100": '⠂',
            "1100": '⠃',
            "0010": '⠄',
            "1010": '⠅',
            "0110": '⠆',
            "1110": '⠇',
            "2000": '⠈',
            "3000": '⠉',
            "2100": '⠊',
            "3100": '⠋',
            "2010": '⠌',
            "3010": '⠍',
            "2110": '⠎',
            "3110": '⠏',

            "0200": '⠐',
            "1200": '⠑',
            "0300": '⠒',
            "1300": '⠓',
            "0210": '⠔',
            "1210": '⠕',
            "0310": '⠖',
            "1310": '⠗',
            "2200": '⠘',
            "3200": '⠙',
            "2300": '⠚',
            "3300": '⠛',
            "2210": '⠜',
            "3210": '⠝',
            "2310": '⠞',
            "3310": '⠟',

            "0020": '⠠',
            "1020": '⠡',
            "0120": '⠢',
            "1120": '⠣',
            "0030": '⠤',
            "1030": '⠥',
            "0130": '⠦',
            "1130": '⠧',
            "2020": '⠨',
            "3020": '⠩',
            "2120": '⠪',
            "3120": '⠫',
            "2030": '⠬',
            "3030": '⠭',
            "2130": '⠮',
            "3130": '⠯',

            "0220": '⠰',
            "1220": '⠱',
            "0320": '⠲',
            "1320": '⠳',
            "0230": '⠴',
            "1230": '⠵',
            "0330": '⠶',
            "1330": '⠷',
            "2220": '⠸',
            "3220": '⠹',
            "2320": '⠺',
            "3320": '⠻',
            "2230": '⠼',
            "3230": '⠽',
            "2330": '⠾',
            "3330": '⠿',

            "0001": "⡀",
            "1001": "⡁",
            "0101": "⡂",
            "1101": "⡃",
            "0011": "⡄",
            "1011": "⡅",
            "0111": "⡆",
            "1111": "⡇",
            "2001": "⡈",
            "3001": "⡉",
            "2101": "⡊",
            "3101": "⡋",
            "2011": "⡌",
            "3011": "⡍",
            "2111": "⡎",
            "3111": "⡏",

            "0201": "⡐",
            "1201": "⡑",
            "0301": "⡒",
            "1301": "⡓",
            "0211": "⡔",
            "1211": "⡕",
            "0311": "⡖",
            "1311": "⡗",
            "2201": "⡘",
            "3201": "⡙",
            "2301": "⡚",
            "3301": "⡛",
            "2211": "⡜",
            "3211": "⡝",
            "2311": "⡞",
            "3311": "⡟",

            "0021": "⡠",
            "1021": "⡡",
            "0121": "⡢",
            "1121": "⡣",
            "0031": "⡤",
            "1031": "⡥",
            "0131": "⡦",
            "1131": "⡧",
            "2021": "⡨",
            "3021": "⡩",
            "2121": "⡪",
            "3121": "⡫",
            "2031": "⡬",
            "3031": "⡭",
            "2131": "⡮",
            "3131": "⡯",

            "0221": "⡰",
            "1221": "⡱",
            "0321": "⡲",
            "1321": "⡳",
            "0231": "⡴",
            "1231": "⡵",
            "0331": "⡶",
            "1331": "⡷",
            "2221": "⡸",
            "3221": "⡹",
            "2321": "⡺",
            "3321": "⡻",
            "2231": "⡼",
            "3231": "⡽",
            "2331": "⡾",
            "3331": "⡿",

            "0002": "⢀",
            "1002": "⢁",
            "0102": "⢂",
            "1102": "⢃",
            "0012": "⢄",
            "1012": "⢅",
            "0112": "⢆",
            "1112": "⢇",
            "2002": "⢈",
            "3002": "⢉",
            "2102": "⢊",
            "3102": "⢋",
            "2012": "⢌",
            "3012": "⢍",
            "2112": "⢎",
            "3112": "⢏",

            "0202": "⢐",
            "1202": "⢑",
            "0302": "⢒",
            "1302": "⢓",
            "0212": "⢔",
            "1212": "⢕",
            "0312": "⢖",
            "1312": "⢗",
            "2202": "⢘",
            "3202": "⢙",
            "2302": "⢚",
            "3302": "⢛",
            "2212": "⢜",
            "3212": "⢝",
            "2312": "⢞",
            "3312": "⢟",

            "0022": "⢠",
            "1022": "⢡",
            "0122": "⢢",
            "1122": "⢣",
            "0032": "⢤",
            "1032": "⢥",
            "0132": "⢦",
            "1132": "⢧",
            "2022": "⢨",
            "3022": "⢩",
            "2122": "⢪",
            "3122": "⢫",
            "2032": "⢬",
            "3032": "⢭",
            "2132": "⢮",
            "3132": "⢯",

            "0222": "⢰",
            "1222": "⢱",
            "0322": "⢲",
            "1322": "⢳",
            "0232": "⢴",
            "1232": "⢵",
            "0332": "⢶",
            "1332": "⢷",
            "2222": "⢸",
            "3222": "⢹",
            "2322": "⢺",
            "3322": "⢻",
            "2232": "⢼",
            "3232": "⢽",
            "2332": "⢾",
            "3332": "⢿",

            "0003": "⣀",
            "1003": "⣁",
            "0103": "⣂",
            "1103": "⣃",
            "0013": "⣄",
            "1013": "⣅",
            "0113": "⣆",
            "1113": "⣇",
            "2003": "⣈",
            "3003": "⣉",
            "2103": "⣊",
            "3103": "⣋",
            "2013": "⣌",
            "3013": "⣍",
            "2113": "⣎",
            "3113": "⣏",

            "0203": "⣐",
            "1203": "⣑",
            "0303": "⣒",
            "1303": "⣓",
            "0213": "⣔",
            "1213": "⣕",
            "0313": "⣖",
            "1313": "⣗",
            "2203": "⣘",
            "3203": "⣙",
            "2303": "⣚",
            "3303": "⣛",
            "2213": "⣜",
            "3213": "⣝",
            "2313": "⣞",
            "3313": "⣟",

            "0023": "⣠",
            "1023": "⣡",
            "0123": "⣢",
            "1123": "⣣",
            "0033": "⣤",
            "1033": "⣥",
            "0133": "⣦",
            "1133": "⣧",
            "2023": "⣨",
            "3023": "⣩",
            "2123": "⣪",
            "3123": "⣫",
            "2033": "⣬",
            "3033": "⣭",
            "2133": "⣮",
            "3133": "⣯",

            "0223": "⣰",
            "1223": "⣱",
            "0323": "⣲",
            "1323": "⣳",
            "0233": "⣴",
            "1233": "⣵",
            "0333": "⣶",
            "1333": "⣷",
            "2223": "⣸",
            "3223": "⣹",
            "2323": "⣺",
            "3323": "⣻",
            "2233": "⣼",
            "3233": "⣽",
            "2333": "⣾",
            "3333": "⣿"
        }
        return block
    # 平均亮度

    def getAverageL(self, image):
        image_arr = np.array(image)
        mean = round(float(np.mean(image_arr)) / 255, 2)
        return mean


main(sys.argv[1], sys.argv[2])
